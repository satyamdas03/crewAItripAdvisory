over here i am going to document the steps that i have followed..and i am not using readme file, cause i dont want

steps:
1) setting up the environment 
    --> we are going to setup our pyproject.toml this is basically going to turn all the requirements of our project into code
    so that we can just run our install script basically to package and build all the necessary dependencies to run our python application
    
    --> we are gonna have to install poetry  ==> pipx install poetry
    --> before installing poetry, we are gonna need to install pipx ==> use : py -m pip install --user pipx
    --> we have to create our own pyproject.toml file
        --> there are 2 key components that needed to be set up first one is "tool.poetry" in which we need to define the core components such as the "name", "description"
        --> the other one is the dependencies where we are going to specifically call out which package conversions we need to set up crew
        all of the necessary stuff is written in the project.toml file
        -->tool.pyright is going to allow us to check python codes for type errors
        -->tool.ruff is going to check for errors and also styling issues
        -->build-system is going to poetry version 

2) next step is to open up the terminal and do "poetry install --no-root"

3) poetry env list --> to check the currently used Python version for your Poetry environment with

4) poetry shell --> enter into the poetry environment  
        # after this we will have a python environment in which we can work in
    
After this we can start working on the agents


cheat sheet to make a good agent
-think like a boss. work backwards from the goal and think which employee you need to hire to get the job done.
-define the captain of the crew who orient the other agents towards the goal.
-define which experts the captain needs to communicate with and 
delegate tasks to. build a top down structure of the crew

Goal: 
 -create a 7day itinerary with detailed per-day plans, including budget, packing suggestions, and safety tips

Captain/Manager/Boss:
 -expert travel agent

Employees/Expert to hire:
 -city selection expert
 -local tour guide

Notes:
-Agents should be results driven and have a clear goal in mind
-Role is their job title
-Goals should actionable
-Backstory should be their resume


5) next step is to define the agents 
    - expert_travel_agent
    - city_selection_agent
    - local_tour_guide

        -now go per agent and filling out what the agent is doing 
        -to save money use GPT3.5
        -if the project gives good results use GPT4


6) the next step is creating the tools the agents
are going to use to formulate the processes and
everything
    # separate folder needs to be created, name : tools
        - file names of the tools 
        {search_tools.py, calculator_tools.py}
    - tool number 1) search tool  --> the explanation is written in the code file
    - tool number 2) simple calculator --> the explanation is written in the code file


cheat sheet to make a good agent
- begin with the end in mind. Identify the specific outcome your tasks are aiming to achieve.
- break down the outcome into actionable tasks, assigning each task to the appropriate agent.
- ensure the tasks are descriptive, providing clear instructions and expected deliverables.

goal:
- develop a detailed itinerary, including city selection, attractions, and practical travel ad 

key steps for task creation:
    1) Identify the desired outcome : define what success looks like for your project
        - A detailed 7 day travel itinerary

    2) task breakdown : divide the goal into smaller, manageable tasks that agents can execute.
        -itinerary Planning : develop a detailed plan for each day of the trip.
        -city selection : analyze and pick the best cities to visit
        - local tour guide : find a local expert to provide insights and recommendations

    3) assign tasks to agents : match tasks with agents based on their roles and expertise
    4) task description template:
        - use this template as a guide to define each task in your crewAI application.
        - this template helps ensure that each task is clearly defined, actionable, and aligned with...

        Template:
        ----------
        def[task_name](self,agent,[parameters]):
            return Task(description=dedent(f'''
            **Task** : [Provide a concise name or summary of the task]
            **Description** : [detailed description of what the agent is expected to do, including actionable steps]

            **Parameters** :
            - [Parameter 1] : [Description]
            - [Parameter 2] : [Description]
            ... [Add more parameters as needed].

            **Note** : [Optional section for incentives or encouragement for high-quality work]

            '''), agent = agent)


7) compiling every so that the final output can run 